
SELECT * INTO [BikeBuyerPredict]
FROM [dbo].[vTargetMail];

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

SELECT TOP(200) * [dbo].[BikeBuyerPredict];

SELECT MAX([Age]), MIN([Age]), AVG([Age]) FROM [dbo].[BikeBuyerPredict];
UPDATE [BikeBuyerPredict] SET [Age]=[Age]-20;


--年齡判斷分組

WITH TT
AS
( SELECT 'AA' AS [CustomerKey],[Age] FROM [BikeBuyerPredict])

SELECT 
	PERCENTILE_DISC(0.25) WITHIN GROUP ( ORDER BY [Age] ASC)  OVER (PARTITION BY [CustomerKey]),
	PERCENTILE_DISC(0.5) WITHIN GROUP ( ORDER BY [Age] ASC)  OVER (PARTITION BY [CustomerKey]),
	PERCENTILE_DISC(0.75) WITHIN GROUP ( ORDER BY [Age] ASC)  OVER (PARTITION BY [CustomerKey])
FROM TT;

/*
10~30  1
30~37  2
37~46  3
46~60  4
60~90  5
*/

ALTER TABLE [BikeBuyerPredict] ADD [AgeLevel] INT;
UPDATE [BikeBuyerPredict] SET [AgeLevel]=IIF([Age]<30,1,IIF([Age]<37,2,IIF([Age]<46,3,IIF([Age]<60,4,5))));


--年收入判斷分組

SELECT MAX(YearlyIncome), MIN(YearlyIncome), AVG(YearlyIncome) FROM [BikeBuyerPredict];

SELECT YearlyIncome,COUNT(*)
FROM [BikeBuyerPredict]
GROUP BY YearlyIncome
ORDER BY YearlyIncome

/*
0~3		1
4~7		2
8~10	3
11~17	4
*/
ALTER TABLE [BikeBuyerPredict] ADD [YearlyIncomeLevel] INT;
UPDATE [BikeBuyerPredict] SET [YearlyIncomeLevel]=
	IIF([YearlyIncome]<=30000,1,
		IIF([YearlyIncome]<=70000,2,
			IIF([YearlyIncome]<100000,3,
				IIF([YearlyIncome]<170000,4,0))));


ALTER TABLE [BikeBuyerPredict] ADD [HasChild] INT;
UPDATE [BikeBuyerPredict] SET [HasChild]=IIF([TotalChildren]>0,1,0);
ALTER TABLE [BikeBuyerPredict] ADD [HasChildAtHome] INT;
UPDATE [BikeBuyerPredict] SET [HasChildAtHome]=IIF([NumberChildrenAtHome]>0,1,0);

ALTER TABLE [BikeBuyerPredict] ADD [Star] INT;
UPDATE [BikeBuyerPredict] SET [Star]=(SELECT [id] FROM dbo.StarSign([BirthDate]));

ALTER TABLE [BikeBuyerPredict] ADD [EduLevel] INT;
UPDATE [BikeBuyerPredict] SET [EduLevel]=
	CASE [EnglishEducation]
			WHEN 'High School' THEN 1
			WHEN 'Partial High School' THEN 2
			WHEN 'Partial College' THEN 3
			WHEN 'Graduate Degree' THEN 4
			WHEN 'Bachelors' THEN 5
		  END;

ALTER TABLE [BikeBuyerPredict] ADD [JobLevel] INT;
UPDATE [BikeBuyerPredict] SET [JobLevel]=
	CASE [EnglishOccupation]
		WHEN 'Professional' THEN 1
		WHEN 'Clerical' THEN 2
		WHEN 'Manual' THEN 3
		WHEN 'Management' THEN 4
		WHEN 'Skilled Manual' THEN 5
	END;


SELECT [CommuteDistance],COUNT(*)
FROM [BikeBuyerPredict]
GROUP BY [CommuteDistance]
ORDER BY [CommuteDistance]

ALTER TABLE [BikeBuyerPredict] ADD [DistanceLevel] INT;
UPDATE [BikeBuyerPredict] SET [DistanceLevel]=
	CASE [CommuteDistance]
		WHEN '0-1 Miles' THEN 1
		WHEN '1-2 Miles' THEN 2
		WHEN '2-5 Miles' THEN 3
		WHEN '5-10 Miles' THEN 4
		WHEN '10+ Miles' THEN 5
	END;


SELECT [Region],COUNT(*)
FROM [BikeBuyerPredict]
GROUP BY [Region]
ORDER BY [Region]

ALTER TABLE [BikeBuyerPredict] ADD [RegionLevel] INT;
UPDATE [BikeBuyerPredict] SET [RegionLevel]=
	CASE [Region]
		WHEN 'North America' THEN 1
		WHEN 'Europe' THEN 2
		WHEN 'Pacific' THEN 3		
	END;

ALTER TABLE [BikeBuyerPredict] ADD [NewGender] INT;
UPDATE [BikeBuyerPredict] SET [NewGender]=IIF([Gender]='F',0,1);

ALTER TABLE [BikeBuyerPredict] ADD [NewMarital] INT;
UPDATE [BikeBuyerPredict] SET [NewMarital]=IIF([MaritalStatus]='S',0,1);


SELECT * FROM [BikeBuyerPredict];

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--DROP TABLE [BikeBuyerPredict_New]

SELECT [BikeBuyer], [AgeLevel], [YearlyIncomeLevel],CAST([HouseOwnerFlag] AS INT) AS [HouseOwned]
	, CAST([NumberCarsOwned] AS INT) AS [NumberCarsOwned], [HasChild], [HasChildAtHome], [Star]
	, [EduLevel], [JobLevel], [DistanceLevel], [RegionLevel], [NewGender], [NewMarital]
INTO [BikeBuyerPredict_New]
FROM [BikeBuyerPredict];


SELECT [BikeBuyer],COUNT(*)
FROM [BikeBuyerPredict_New]
GROUP BY [BikeBuyer]

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE TABLE 模型表
(
    編號 INT IDENTITY(1,1) PRIMARY KEY,
	模型名稱 NVARCHAR(20),
	模型 VARBINARY(MAX),
	建檔時間 DATETIME2(2) DEFAULT SYSDATETIME()
)
GO

--Revo
ALTER PROC #TempPP @sqlQuery NVARCHAR(MAX),@trainedModel VARBINARY(MAX) OUTPUT
AS
	EXECUTE sp_execute_external_script @language = N'R',  
	@script = N'   
		inputData<-data.frame(InputDataSet)	
		cs<-colnames(inputData)		#取出欄位名		
		frm<-paste(cs[1], paste(cs[2:length(cs)], collapse="+"), sep="~")
		model <- rxDForest(frm,inputData)		
		trainedModel<-rxSerializeModel(model)
	'
	,@input_data_1=@sqlQuery
	,@params=N'@trainedModel VARBINARY(MAX) OUTPUT'
	,@trainedModel=@trainedModel OUTPUT
;
GO

--ML
ALTER PROC #TempPP @sqlQuery NVARCHAR(MAX),@trainedModel VARBINARY(MAX) OUTPUT
AS
	EXECUTE sp_execute_external_script @language = N'R',  
	@script = N'   
		inputData<-data.frame(InputDataSet)	
		cs<-colnames(inputData)		#取出欄位名
		frm<-paste(cs[1], paste(cs[2:length(cs)], collapse=" + "), sep=" ~ ")			
		model <- rxFastForest(frm, inputData,type = c("binary"))		
		trainedModel<-rxSerializeModel(model,realtimeScoringOnly=TRUE)
	'
	,@input_data_1=@sqlQuery
	,@params=N'@trainedModel VARBINARY(MAX) OUTPUT'
	,@trainedModel=@trainedModel OUTPUT
	;
GO


DECLARE @ss NVARCHAR(1024)=N'SELECT [BikeBuyer], [NewGender], [NewMarital], [AgeLevel], [YearlyIncomeLevel], [Star]
	, [HouseOwned], [NumberCarsOwned], [HasChild], [HasChildAtHome], [EduLevel], [JobLevel], [DistanceLevel], [RegionLevel]
	FROM [BikeBuyerPredict_New] WHERE [RowId]<=13000';
DECLARE @mm VARBINARY(MAX);

EXEC #TempPP @ss,@mm OUTPUT;
INSERT INTO 模型表(模型名稱,模型) VALUES(N'決策森林',@mm);

SELECT * FROM 模型表;
--DELETE FROM 模型表 WHERE 編號 IN(12);

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

DECLARE @query nvarchar(max) = N'SELECT [BikeBuyer], [NewGender], [NewMarital], [AgeLevel], [YearlyIncomeLevel], [Star]
	, [HouseOwned], [NumberCarsOwned], [HasChild], [HasChildAtHome], [EduLevel], [JobLevel], [DistanceLevel], [RegionLevel]
	FROM [BikeBuyerPredict_New] WHERE [RowId]>13000';
DECLARE @mm VARBINARY(MAX) = (SELECT 模型 FROM 模型表 WHERE 編號=11);

EXEC sp_execute_external_script 
  @language = N'R',
  @script = N'
    trainedModel <- rxUnserializeModel(model);
	test_data <- data.frame(InputDataSet);
	result <- rxPredict(trainedModel, data=test_data,predVarNames=c("Pred_Value"));		
	result2<-data.frame(cbind(test_data$BikeBuyer,result$Pred_Value));	
	names(result2)<-c("Actual_Buy","Pred_Buy");
	print(str(result2))
	OutputDataSet <- result2
  ',
  @input_data_1 = @query,
  @params = N'@model varbinary(max)',
  @model = @mm

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

DECLARE @query nvarchar(max) = N'SELECT [BikeBuyer], [NewGender], [NewMarital], [AgeLevel], [YearlyIncomeLevel], [Star]
	, [HouseOwned], [NumberCarsOwned], [HasChild], [HasChildAtHome], [EduLevel], [JobLevel], [DistanceLevel], [RegionLevel]
	FROM [BikeBuyerPredict_New] WHERE [RowId]>13000';
DECLARE @mm VARBINARY(MAX) = (SELECT 模型 FROM 模型表 WHERE 編號=11);

EXEC sp_execute_external_script 
  @language = N'R',
  @script = N'
    trainedModel <- rxUnserializeModel(model);
	test_data <- data.frame(InputDataSet);
	result <- rxPredict(trainedModel, data=test_data,predVarNames=c("Pred_Value"));		
	result2<-data.frame(cbind(test_data$BikeBuyer,result$Pred_Value));	
	names(result2)<-c("Actual_Buy","Pred_Buy");	
	OutputDataSet <- result2

	#輸出ROC圖檔
	mainDir <- "C:\\PP" 
	dest_filename = tempfile(pattern = "My_ROC_Curve_DForest_Plots", tmpdir = mainDir)  
	dest_filename = paste(dest_filename, ''.jpg'',sep="")      
	jpeg(filename=dest_filename);
	rxRocCurveObject <- rxRocCurve(
			actualVarName="Actual_Buy"
			,predVarNames=c("Pred_Buy")
			,data=result2
			,title="ROC Curve For DForest Model");
	plot(rxRocCurveObject);
	dev.off();	
  ',
  @input_data_1 = @query,
  @params = N'@model varbinary(max)',
  @model = @mm
 ;

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

DECLARE @query nvarchar(max) = N'SELECT [BikeBuyer], [NewGender], [NewMarital], [AgeLevel], [YearlyIncomeLevel], [Star]
	, [HouseOwned], [NumberCarsOwned], [HasChild], [HasChildAtHome], [EduLevel], [JobLevel], [DistanceLevel], [RegionLevel]
	FROM [BikeBuyerPredict_New] WHERE [RowId]>13000';
DECLARE @m4 VARBINARY(MAX) = (SELECT 模型 FROM 模型表 WHERE 編號=4);
DECLARE @m5 VARBINARY(MAX) = (SELECT 模型 FROM 模型表 WHERE 編號=5);
DECLARE @m6 VARBINARY(MAX) = (SELECT 模型 FROM 模型表 WHERE 編號=6);
DECLARE @m9 VARBINARY(MAX) = (SELECT 模型 FROM 模型表 WHERE 編號=9);
DECLARE @m10 VARBINARY(MAX) = (SELECT 模型 FROM 模型表 WHERE 編號=10);
DECLARE @m11 VARBINARY(MAX) = (SELECT 模型 FROM 模型表 WHERE 編號=11);

EXEC sp_execute_external_script 
  @language = N'R',
  @script = N'    
	test_data <- data.frame(InputDataSet);
	model_fastLogit <- rxUnserializeModel(m4);
	model_fastTree <- rxUnserializeModel(m5);
	model_fastForest <- rxUnserializeModel(m6);
	model_logit <- rxUnserializeModel(m9);
	model_tree <- rxUnserializeModel(m10);
	model_forest <- rxUnserializeModel(m11);
	
	result_fastLogit <- rxPredict(model_fastLogit, data=test_data);
	result_fastTree <- rxPredict(model_fastTree, data=test_data);
	result_fastForest <- rxPredict(model_fastForest, data=test_data);
	result_logit <- rxPredict(model_logit, data=test_data);
	result_tree <- rxPredict(model_tree, data=test_data);
	result_forest <- rxPredict(model_forest, data=test_data);

	final_result<-data.frame(cbind(test_data$BikeBuyer
		,result_fastLogit[,3],result_fastTree[,3],result_fastForest[,3]
		,result_logit[,1],result_tree[,1],result_forest[,1]		
		));	

	names(final_result)<-c("Actual_Buy","Pred_FastLogit","Pred_FastTree","Pred_FastForest","Pred_Logit","Pred_DTree","Pred_DForest");	
	OutputDataSet <- final_result

	#輸出ROC圖檔
	mainDir <- "C:\\PP" 
	dest_filename = tempfile(pattern = "My_ROC_Curve_Multi_Plots", tmpdir = mainDir)  
    dest_filename = paste(dest_filename, ''.jpg'',sep="")      
	jpeg(filename=dest_filename);
	rxRocCurveObject <- rxRocCurve(
			actualVarName="Actual_Buy"
			,predVarNames=c("Pred_FastLogit","Pred_FastTree","Pred_FastForest","Pred_Logit","Pred_DTree","Pred_DForest")
			,data=final_result
			,title="ROC Curve For Multi Model");
	plot(rxRocCurveObject);
	dev.off();	
  ',
  @input_data_1 = @query,
  @params = N'@m4 varbinary(max),@m5 varbinary(max),@m6 varbinary(max),@m9 varbinary(max),@m10 varbinary(max),@m11 varbinary(max)',
  @m4 = @m4,
  @m5 = @m5,
  @m6 = @m6,
  @m9 = @m9,
  @m10 = @m10,
  @m11 = @m11
 ;

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------




